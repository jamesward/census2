<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:census2="com.jamesward.census2.*"
                xmlns:controls="com.jamesward.census2.controls.*"
                xmlns:charts="com.jamesward.census2.charts.*"
                xmlns:local="*"
                verticalScrollPolicy="off"
                visible="false"
                styleName="plain">

  <mx:Script>
    <![CDATA[
    import com.jamesward.census2.charts.CensusChartItemRenderer;
    import com.jamesward.census2.core.Model;
    import com.jamesward.census2.core.ResultVO;
    import com.jamesward.census2.core.TestVO;
    import com.jamesward.census2.utils.TextFormatters;

    import mx.events.PropertyChangeEvent;
    import mx.events.StyleEvent;
    import mx.managers.CursorManager;
    import mx.rpc.AsyncResponder;
    import mx.rpc.AsyncToken;
    import mx.rpc.events.FaultEvent;
    import mx.rpc.events.ResultEvent;

    private function changeTheme(theme:String):void
    {
      currentTheme = theme;
      var eventDispatcher:IEventDispatcher = StyleManager.loadStyleDeclarations(currentTheme + ".swf");
      eventDispatcher.addEventListener(StyleEvent.COMPLETE, function(event:StyleEvent):void
      {

        if (!visible)
        {
          visible = true;
        }

        if ((iframe.source == null) || (iframe.source.indexOf("index_results.html") == 0))
        {
          iframe.source = "index_results.html" + "?theme=" + currentTheme;
        }
      });
    }

    private function updateResult(testId:String, resultType:String, resultValue:Number):void
    {
      var result:ResultVO = Model.getInstance().getResult(testId, numRows.value, enableGZip.selected);

      // dirty check
      if (result["user" + "_" + resultType] != resultValue)
      {
        result["user" + "_" + resultType] = resultValue;

        if ((!isNaN(result.user_requestTime)) && (!isNaN(result.user_parseTime)) && (!isNaN(result.user_renderTime)) && (!isNaN(result.user_contentLength)))
        {
          // assume we are done
          CursorManager.removeBusyCursor();

          Model.getInstance().selectedResult = result;
          Model.getInstance().selectedResultType = ResultVO.USER;

          // refresh average results
          fetchAverageResults();
        }
      }
    }

    public function startTest(test:TestVO):void
    {
      cursorManager.removeAllCursors();

      if (numRows.value > numRows.maximum)
      {
        numRows.value = numRows.maximum;
      }

      iframeBox.height = 300;

      iframe.source = test.url + "?clientId=" + channelConfig.subtopic +
              "&sendCensusResultURL=" + channelConfig.sendCensusResultURL +
              "&numRows=" + numRows.value +
              "&enableGZip=" + enableGZip.selected;

      cursorManager.setBusyCursor();
    }

    private function fetchAverageResults():void
    {
      Model.getInstance().numRows = numRows.value;
      Model.getInstance().enableGzip = enableGZip.selected;

      if ((channelConfig.remoteObject != null) && (Model.getInstance().tests.length > 0))
      {
        for each (var test:TestVO in Model.getInstance().tests)
        {
          var token:AsyncToken = channelConfig.remoteObject.getAverageResults(test.id, enableGZip.selected, numRows.value);
          token.addResponder(new AsyncResponder(handleAverageResultsResult, handleAverageResultsFault, {testId: test.id, gzip: enableGZip.selected, numRows: numRows.value}));
        }
      }
    }

    private function handleAverageResultsResult(event:ResultEvent, token:Object):void
    {
      var result:ResultVO = Model.getInstance().getResult(token.testId, token.numRows, token.gzip);
      for (var resultType:String in event.result)
      {
        result["average" + "_" + resultType] = event.result[resultType];
      }
    }

    private function handleAverageResultsFault(event:FaultEvent, token:Object):void
    {
      //trace('fault');
    }

    public function runTest(testId:String):void
    {
      var test:TestVO = Model.getInstance().getTestById(testId);
      startTest(test);
    }

    private function checkSelectedItem(event:PropertyChangeEvent):void
    {
      if ((event.property == "selectedResult") || (event.property == "selectedResultType"))
      {
        if ((Model.getInstance().selectedResult != null) && (Model.getInstance().selectedResultType != null))
        {
          cdp.open();
        }
      }
    }
    ]]>
  </mx:Script>

  <mx:Metadata>
  [SWF(backgroundColor="0xe5e5e5")]
  </mx:Metadata>
  
  <mx:initialize>
    changeTheme("readable");

    srv.send();
    
    var item:ContextMenuItem = new ContextMenuItem("Invert Colors");
    item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function (event:Event):void {
      currentTheme == "sexy" ? changeTheme("readable") : changeTheme("sexy")
    });
    this.contextMenu.customItems.push(item);

    Model.getInstance().addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, checkSelectedItem);
  </mx:initialize>

  <mx:mouseDown>
    if (!(event.target.document is CensusChartItemRenderer))
    {
      cdp.close();
    }
  </mx:mouseDown>

  <mx:String id="currentTheme"/>

  <mx:Move id="moveEffect" duration="500" target="{chartsVBox}"/>

  <census2:ChannelConfig id="channelConfig">
    <census2:message>
      updateResult(event.message.body.testId, event.message.body.resultType as String, new Number(event.message.body.resultData));
    </census2:message>
  </census2:ChannelConfig>

  <mx:HTTPService id="srv" url="tests.xml">
    <mx:result>
        for each (var test:Object in event.result.tests.test)
        {
          Model.getInstance().tests.addItem(new TestVO(test.id, test.url, test.name, test.description));
        }
  
        fetchAverageResults();
    </mx:result>
  </mx:HTTPService>

  <mx:HBox width="100%" height="100%" horizontalGap="0" styleName="innerBackground">
    <mx:VBox width="100%" height="100%" horizontalAlign="left" verticalGap="0" horizontalScrollPolicy="off" paddingBottom="10" paddingLeft="15" paddingRight="15">
      <mx:Spacer height="15"/>
      <mx:HBox height="40" width="100%" verticalAlign="bottom">
        <controls:LabelLink url="http://www.jamesward.com/ria-benchmark" height="25" width="100%" label="Census v2.0" textAlign="center" fontSize="18" fontWeight="bold" toolTip="Learn more about Census"/>
        <mx:Spacer width="100%"/>
        <mx:Label text="Data loading and rendering performance comparison for RIA technologies" fontWeight="bold" fontSize="14"/>
      </mx:HBox>
      <mx:HRule width="100%"/>
      <mx:Spacer height="10"/>
      <mx:VBox width="100%" styleName="leftInnerContainer" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
        
        <mx:HBox width="100%" verticalAlign="middle" horizontalAlign="left" horizontalGap="3" paddingLeft="10">
          <mx:Label text="Comparison Parameters:" fontWeight="bold"/>
          
          <mx:Label text="# Rows" paddingTop="2"/>
          <controls:MyNumericStepper id="numRows" minimum="1000" maximum="100000" stepSize="1000" value="20000" useHandCursor="true" buttonMode="true" height="26" width="70" textIndent="0" textAlign="right" change="fetchAverageResults()"/>
        
          <mx:CheckBox id="enableGZip" label="Enable GZip" paddingLeft="10" labelPlacement="left" selected="true" useHandCursor="true" buttonMode="true" mouseChildren="false" change="fetchAverageResults()"/>
        
          <mx:Spacer width="100%"/>

          <mx:ComboBox id="clc" width="250" height="26" dataProvider="['Request | Parse | Render', 'Transfer Size', 'Client Memory Usage']">
            <mx:change>
              moveEffect.yTo = (recordsPerSecondChartView.height * -1 * clc.selectedIndex);
              moveEffect.play();
            </mx:change>
          </mx:ComboBox>

          <!--
          <controls:ChartLegendCombo id="clc" width="250" height="26" charts="{[recordsPerSecondChartView, transferSizeChartView, clientSideMemoryChartView]}">
            <controls:change>
              chartsVBox.y = (recordsPerSecondChartView.height * -1 * clc.selectedIndex);
            </controls:change>
          </controls:ChartLegendCombo>
          -->
          
        </mx:HBox>
      </mx:VBox>

      <mx:Spacer height="10"/>
      
      <mx:Canvas id="chartsCanvas" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
        
        <mx:VBox id="chartsVBox" width="100%" height="{chartsCanvas.height * 3}" verticalGap="0">
          <charts:CensusChart id="recordsPerSecondChartView"
                                           width="100%" height="100%"
                                           averageColors="[0x467299, 0xf6c54c, 0xff3f20]"
                                           userColors="[0x2a547a, 0xd8a62d, 0xc92719]"
                                           dataFields="['requestTime', 'parseTime', 'renderTime']"
                                           axisLabelFormatterFunction="TextFormatters.timeFormat"
                                           />
          <charts:CensusChart id="transferSizeChartView"
                                       width="100%" height="100%"
                                       averageColors="[0x339966]"
                                       userColors="[0x246d49]"
                                       dataFields="['contentLength']"
                                       axisLabelFormatterFunction="TextFormatters.byteFormat"
                                       />
          <charts:CensusChart id="clientSideMemoryChartView"
                              width="100%" height="100%"
                              averageColors="[0x990000]"
                              userColors="[0x6d0000]"
                              dataFields="['memorySize']"
                              axisLabelFormatterFunction="TextFormatters.byteFormat"
                              />
        </mx:VBox>

        <!-- Selected Item Overlay -->
        <controls:ChartDataPopUp id="cdp" top="0" right="0" bottom="36" visible="false"/>
        
      </mx:Canvas>

      <mx:Spacer height="20"/>

      <mx:Box id="iframeBox" width="100%" height="0" styleName="leftInnerContainer" visible="{iframeBox.height != 0}">
        <local:IFrame id="iframe" width="100%" height="100%" visible="true" creationComplete="iframe.visible = true"/>
      </mx:Box>

    </mx:VBox>
  </mx:HBox>

</mx:Application>