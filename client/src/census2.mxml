<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:census2="com.jamesward.census2.*"
                xmlns:controls="com.jamesward.census2.controls.*"
                xmlns:views="com.jamesward.census2.views.*"
                xmlns:local="*"
                verticalScrollPolicy="off"
                visible="false"
                styleName="plain">

  <mx:Script>
    <![CDATA[
      import com.jamesward.census2.utils.TextFormatters;
      
      import mx.charts.BarChart;
      import mx.charts.series.BarSeries;
      import mx.controls.Alert;
      import mx.core.UIComponent;
      import mx.events.FlexEvent;
      import mx.events.StyleEvent;
      import mx.managers.CursorManager;
      import mx.rpc.AsyncResponder;
      import mx.rpc.AsyncToken;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      import mx.utils.ObjectUtil;
    
    [Bindable]
    private var averageResultsArrayCollection:ArrayCollection = new ArrayCollection();
    
    [Bindable]
    private var yourResultsArrayCollection:ArrayCollection = new ArrayCollection();
    
    [Bindable]
    private var chartArrayCollection:ArrayCollection = averageResultsArrayCollection;
      
    private var selectedChartIndex:Number = -1;
      
    private var resultsViewType:String = "averageResults";
    

    private function changeTheme(theme:String):void
    {
      currentTheme = theme;
      var eventDispatcher:IEventDispatcher = StyleManager.loadStyleDeclarations(currentTheme + ".swf");
      eventDispatcher.addEventListener(StyleEvent.COMPLETE, function(event:StyleEvent):void {
        
        if (!visible)
        {
          visible = true;
        }
        
        if ((iframe.source == null) || (iframe.source.indexOf("index_results.html") == 0))
        {
          iframe.source = "index_results.html" + "?theme=" + currentTheme;
        }
        
        // list selectionColor doesn't automatically update.  Force it!
        testList.styleChanged("selectionColor");
      });
    }
    
    public function resetResults(test:Object):void
    {
      var resetDone:Boolean = false;
      
      for each (var result:Object in yourResultsArrayCollection)
      {
        if (result.id == test.id)
        {
          result.name = test.name;
          resetResult(result);
          
          resetDone = true;
          break;
        }
      }
      
      if (!resetDone)
      {
        yourResultsArrayCollection.addItemAt({id: test.id}, 0);
        resetResults(test);
      }
    }
    
    private function updateResult(testId:String, resultType:String, resultValue:Number):void
    {
      var i:uint = 0;
      for each (var result:Object in yourResultsArrayCollection)
      {
        if (result.id == testId)
        {
          // dirty check
          if (result[resultType] != resultValue)
          {
            result[resultType] = resultValue;
          
            if ( (!isNaN(result['requestTime'])) && (!isNaN(result['parseTime'])) && (!isNaN(result['renderTime'])) && (!isNaN(result['contentLength'])) )
            {
              // calc transfer time
              //updateResult(testId, "transferTime", result['requestTime'] - result['totalServerTime']);
              
              // assume we are done
              CursorManager.removeBusyCursor();
              
              // select the chart item
              selectedChartIndex = i;
              
              updateSelectedChartItem();
              
              cdp.open();
              
              // refresh average results
              fetchAverageResults();
            }
          
            //updateCharts();
            yourResultsArrayCollection.itemUpdated(result);
          }
          
          break;
        }
        
        i++;
      }
    }
    
    public function startTest(test:Object):void
    {
      cursorManager.removeAllCursors();
      
      if (numRows.value > numRows.maximum)
      {
        numRows.value = numRows.maximum;
      }
        
      resetResults(test);
      
      iframe.source = test.url + "?clientId="+channelConfig.subtopic +
      "&sendCensusResultURL=" + channelConfig.sendCensusResultURL +
      "&numRows="+numRows.value +
      "&enableGZip="+enableGZip.selected;
      
      // auto switch to user results
      resultsViewType = "yourResults";
      switchChartArrayCollection();
      
      cursorManager.setBusyCursor();
    }
    
    private function switchChartArrayCollection():void
    {
      var switched:Boolean = false;

      if (resultsViewType == "averageResults")
      {
        iframeBox.height = 0;
        averageResultsText.visible = averageResultsText.includeInLayout = true;
        yourResultsText.visible = yourResultsText.includeInLayout = false;
        
        if (chartArrayCollection != averageResultsArrayCollection)
        {
          chartArrayCollection = averageResultsArrayCollection;
          switched = true;
        }
      }
      else if (resultsViewType == "yourResults")
      {
        iframeBox.height = 300;
        averageResultsText.visible = averageResultsText.includeInLayout = false;
        yourResultsText.visible = yourResultsText.includeInLayout = true;
        
        if (chartArrayCollection != yourResultsArrayCollection)
        {
          chartArrayCollection = yourResultsArrayCollection;
          switched = true;
        }
      }
      
      if (switched)
      {
        cdp.close();
      }
    }
    
    private function fetchAverageResults():void
    {
      if ((channelConfig.remoteObject != null) && (tests.length > 0))
      {
        
        for each (var test:Object in tests)
        {
          // reset results
          var result:Object = getAverageResultsItem(test.id);
          resetResult(result);
          
          var token:AsyncToken = channelConfig.remoteObject.getAverageResults(test.id, enableGZip.selected, numRows.value);
          token.addResponder(new AsyncResponder(handleAverageResultsResult, handleAverageResultsFault, {testId: test.id, gzip: enableGZip.selected, numRows: numRows.value}));
        }
      }
    }
    
    private function handleAverageResultsResult(event:ResultEvent, token:Object):void
    {
      var item:Object = getAverageResultsItem(token.testId);
      item.numRows = token.numRows;
      item.gzip = token.gzip;
      for (var resultType:String in event.result)
      {
        item[resultType] = event.result[resultType];
      }
      //item["transferTime"] = item['requestTime'] - item['totalServerTime'];
      
      averageResultsArrayCollection.itemUpdated(item);
      
      updateSelectedChartItem();
    }
    
    private function handleAverageResultsFault(event:FaultEvent, token:Object):void
    {
      //trace('fault');
    }
    
    private function getAverageResultsItem(testId:String):Object
    {
      var averageResultsItem:Object;
      
      for each (var item:Object in averageResultsArrayCollection)
      {
        if (item.id == testId)
        {
          averageResultsItem = item;
          
          return averageResultsItem;
        }
      }
      
      var newItem:Object = new Object();
      newItem.id = testId;
      
      for each (var t:Object in tests)
      {
        if (t.id == testId)
        {
          newItem.name = t.name;
        }
      }
      averageResultsArrayCollection.addItemAt(newItem, 0);
      return getAverageResultsItem(testId);
    }
    
    private function resetResult(result:Object):void
    {
      result.gzip = enableGZip.selected;
      result.numRows = numRows.value;
      //result.totalServerTime = 0;
      //result.transferTime = 0;
      //result.totalServerTime = 0;
      result.requestTime = NaN;
      result.parseTime = NaN;
      result.renderTime = NaN;
      result.contentLength = NaN;
      result.memorySize = NaN;
    }
      
    public function selectChartItem(item:Object):void
    {
      if (item != null)
      {
        selectedChartIndex = item.index;
        
        cdp.open();
      }
      else
      {
        selectedChartIndex = -1;
        
        cdp.close();
      }
      
      updateSelectedChartItem();
    }
    
    private function updateSelectedChartItem():void
    {
      if (selectedChartIndex != -1)
      {
        for each (var chart:BarChart in [recordsPerSecondChartView.chart, transferSizeChartView.chart, clientSideMemoryChartView.chart])
        {
          for each (var s:BarSeries in chart.series)
          {
            s.selectedIndex = selectedChartIndex;
          }
        }
        
        cdp.data = chartArrayCollection.getItemAt(selectedChartIndex);
      }
      else
      {
        for each (var chart2:BarChart in [recordsPerSecondChartView.chart, transferSizeChartView.chart, clientSideMemoryChartView.chart])
        {
          chart2.clearSelection();
        }
      }
    }
    ]]>
  </mx:Script>

  <mx:Metadata>
  [SWF(backgroundColor="0xe5e5e5")]
  </mx:Metadata>
  
  <mx:initialize>
    changeTheme("readable");

    srv.send();
    
    var item:ContextMenuItem = new ContextMenuItem("Invert Colors");
    item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function (event:Event):void {
      currentTheme == "sexy" ? changeTheme("readable") : changeTheme("sexy")
    });
    this.contextMenu.customItems.push(item);
  </mx:initialize>

  <mx:String id="currentTheme"/>

  <mx:ArrayCollection id="tests"/>

  <census2:ChannelConfig id="channelConfig">
    <census2:message>
      updateResult(event.message.body.testId,  event.message.body.resultType, new Number(event.message.body.resultData));
    </census2:message>
    <census2:setup>
      fetchAverageResults();
    </census2:setup>
  </census2:ChannelConfig>

  <mx:HTTPService id="srv" url="tests.xml">
    <mx:result>
      tests = event.result.tests.test;
      for each (var test:Object in tests)
      {
        resetResults(test);
      }
      fetchAverageResults();
    </mx:result>
  </mx:HTTPService>

  <mx:SeriesInterpolate id="interpolate"/>

  <mx:HBox width="100%" height="100%" horizontalGap="0" styleName="innerBackground">
    <mx:VBox width="276" height="100%" horizontalAlign="left" verticalGap="0" horizontalScrollPolicy="off" paddingBottom="10" paddingLeft="15" paddingRight="15">
      <mx:Spacer height="15"/>
      <controls:LabelLink url="http://www.jamesward.com/ria-benchmark" height="25" width="100%" label="Census v2.0" textAlign="center" fontSize="18" fontWeight="bold" toolTip="Learn more about Census"/>
      <mx:HRule width="100%"/>
      <mx:Spacer height="10"/>
      <mx:Text text="Data loading and rendering performance comparison for RIA technologies" width="100%" fontWeight="bold"/>
      <mx:Spacer height="20"/>
      <mx:VBox width="100%" styleName="leftInnerContainer" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
        
        <mx:Label text="Comparison Parameters:" fontWeight="bold"/>
        <mx:HBox width="100%" verticalAlign="middle" horizontalAlign="left" horizontalGap="3" paddingLeft="10">
          
          <mx:Label text="# Rows" paddingTop="2"/>
          <controls:MyNumericStepper id="numRows" minimum="1000" maximum="100000" stepSize="1000" value="20000" useHandCursor="true" buttonMode="true" height="26" width="70" textIndent="0" textAlign="right" change="fetchAverageResults()">
            <controls:keyDown>
              <![CDATA[
              if (((event as KeyboardEvent).keyCode == Keyboard.ENTER) && (testList.selectedItem != null))
              {
                resetResults(testList.selectedItem);
                startTest(testList.selectedItem);
              }
              ]]>
            </controls:keyDown>
          </controls:MyNumericStepper>
        </mx:HBox>
        
        <mx:CheckBox id="enableGZip" label="Enable GZip" paddingLeft="10" labelPlacement="left" selected="true" useHandCursor="true" buttonMode="true" mouseChildren="false" change="fetchAverageResults()"/>
        
        <mx:Button label="View Average Results" width="100%" useHandCursor="true" buttonMode="true">
          <mx:click>
            resultsViewType = "averageResults";
            switchChartArrayCollection();
            fetchAverageResults();
          </mx:click>
        </mx:Button>
      </mx:VBox>

      <mx:Spacer height="20"/>
      
      <mx:VBox width="100%" styleName="leftInnerContainer" paddingTop="5" paddingBottom="5">
        <mx:Label text="See your results for:" fontWeight="bold" paddingLeft="5"/>
        <mx:List id="testList" width="100%" height="{(tests.length * 26) + 2}" rowHeight="26" dataProvider="{tests}"
                 doubleClickEnabled="true" borderStyle="none" backgroundAlpha="0" useRollOver="false">
          <mx:itemRenderer>
            <mx:Component>
              <mx:Canvas verticalScrollPolicy="off" horizontalScrollPolicy="off"
                useHandCursor="true" buttonMode="true" mouseChildren="false"
                backgroundAlpha="0.000001" backgroundColor="#ffffff">
                <mx:Label text="{data.name}" width="100" fontSize="10" styleName="listItem" fontWeight="bold"/>
                <mx:Label id="ld" text="{data.description}" left="105" width="135" fontSize="10" toolTip=""/>
                <mx:Image id="i" source="@Embed(source='assets/rightIcon.png')" visible="false" right="5">
                </mx:Image>
                <mx:mouseOver>
                  ld.width = 120;
                  i.visible = true;
                </mx:mouseOver>
                <mx:mouseOut>
                  ld.width = 135;
                  i.visible = false;
                </mx:mouseOut>
                <mx:click>
                  outerDocument.resetResults(data);
                  outerDocument.startTest(data);
                </mx:click>
              </mx:Canvas>
            </mx:Component>
          </mx:itemRenderer>
        </mx:List>
        <mx:Box width="100%" paddingLeft="5" paddingRight="5">
          <mx:Button id="runButton" width="100%" height="26" label="View Your Results" useHandCursor="{testList.selectedItem != null}" buttonMode="true">
            <mx:click>
              resultsViewType = "yourResults";
              switchChartArrayCollection();
            </mx:click>
          </mx:Button>
        </mx:Box>
      </mx:VBox>
    </mx:VBox>
    <mx:VBox width="100%" height="100%" horizontalAlign="center" verticalGap="0" paddingBottom="10" paddingRight="15">
      <mx:Spacer height="40"/>
      
      <mx:HRule width="100%"/>
      <mx:Spacer height="10"/>
      <mx:VBox id="myTabs" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" verticalGap="10">
        
        <mx:HBox width="100%" paddingLeft="70" paddingRight="20" verticalAlign="bottom" height="26">
          
          <mx:Label id="averageResultsText" text="Average Results for All Users ({TextFormatters.getRpsFormatter().format(numRows.value)} Rows{enableGZip.selected ? ' with Gzip' : ''})" fontSize="12" fontWeight="bold"/>
          <mx:Label id="yourResultsText" text="Your Results" fontSize="12" fontWeight="bold" visible="false" includeInLayout="false"/>
          
          <mx:Spacer width="100%"/>
          
          <controls:ChartLegendCombo id="clc" width="250" height="26" charts="{[recordsPerSecondChartView, transferSizeChartView, clientSideMemoryChartView]}">
            <controls:change>
              chartsVBox.y = (recordsPerSecondChartView.height * -1 * clc.selectedIndex);
            </controls:change>
          </controls:ChartLegendCombo>
          
        </mx:HBox>
        
        <mx:Canvas id="chartsCanvas" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
          
          <mx:VBox id="chartsVBox" width="100%" height="{chartsCanvas.height * 3}" verticalGap="0" moveEffect="Move">
            <views:RecordsPerSecondChartView id="recordsPerSecondChartView" width="100%" height="100%" dataProvider="{chartArrayCollection}"/>
            <views:TransferSizeChartView id="transferSizeChartView" width="100%" height="100%" dataProvider="{chartArrayCollection}"/>
            <views:ClientSideMemoryChartView id="clientSideMemoryChartView" width="100%" height="100%" dataProvider="{chartArrayCollection}"/>
          </mx:VBox>

          <controls:ChartDataPopUp id="cdp" top="1" right="21"/>
          
        </mx:Canvas>
      </mx:VBox>
      <mx:Spacer height="10"/>
      <mx:Box id="iframeBox" width="100%" height="0" styleName="leftInnerContainer" visible="{iframeBox.height != 0}">
        <local:IFrame id="iframe" width="100%" height="100%" visible="true" creationComplete="iframe.visible = true"/>
      </mx:Box>
    </mx:VBox>
  </mx:HBox>

</mx:Application>