<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:census2="com.jamesward.census2.*"
                xmlns:controls="com.jamesward.census2.controls.*"
                xmlns:views="com.jamesward.census2.views.*"
                xmlns:local="*"
                verticalScrollPolicy="off"
                visible="false"
                styleName="plain">

  <mx:Script>
    <![CDATA[
      import com.jamesward.census2.utils.TextFormatters;
      
      import mx.controls.Alert;
      import mx.core.UIComponent;
      import mx.events.FlexEvent;
      import mx.events.StyleEvent;
      import mx.managers.CursorManager;
      import mx.rpc.AsyncResponder;
      import mx.rpc.AsyncToken;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      import mx.utils.ObjectUtil;
    
    [Bindable]
    private var averageResultsArrayCollection:ArrayCollection = new ArrayCollection();
    
    [Bindable]
    private var yourResultsArrayCollection:ArrayCollection = new ArrayCollection();
    
    [Bindable]
    private var chartArrayCollection:ArrayCollection = averageResultsArrayCollection;
    

    private function changeTheme(theme:String):void
    {
      currentTheme = theme;
      var eventDispatcher:IEventDispatcher = StyleManager.loadStyleDeclarations(currentTheme + ".swf");
      eventDispatcher.addEventListener(StyleEvent.COMPLETE, function(event:StyleEvent):void {
        
        if (!visible)
        {
          visible = true;
        }
        
        if ((iframe.source == null) || (iframe.source.indexOf("index_results.html") == 0))
        {
          iframe.source = "index_results.html" + "?theme=" + currentTheme;
        }
        
        // list selectionColor doesn't automatically update.  Force it!
        testList.setStyle("selectionColor", StyleManager.getStyleDeclaration("List").getStyle("selectionColor"));
      });
    }
    
    private function resetResults(test:Object):void
    {
      var resetDone:Boolean = false;
      
      for each (var result:Object in yourResultsArrayCollection)
      {
        if (result.id == test.id)
        {
          result.name = test.name;
          resetResult(result);
          
          resetDone = true;
          break;
        }
      }
      
      if (!resetDone)
      {
        yourResultsArrayCollection.addItemAt({id: test.id}, 0);
        resetResults(test);
      }
    }
    
    private function updateResult(testId:String, resultType:String, resultValue:Number):void
    {
      for each (var result:Object in yourResultsArrayCollection)
      {
        if (result.id == testId)
        {
          // dirty check
          if (result[resultType] != resultValue)
          {
            result[resultType] = resultValue;
          
            if (result['requestTime'] && result['totalServerTime'])
            {
              // calc transfer time
              updateResult(testId, "transferTime", result['requestTime'] - result['totalServerTime']);
              
              // assume we are done
              CursorManager.removeBusyCursor();
              
              // refresh average results
              fetchAverageResults();
            }
          
            //updateCharts();
            yourResultsArrayCollection.itemUpdated(result);
          }
          
          break;
        }
      }
    }
    
    private function startTest(test:Object):void
    {
      resetResults(test);
      
      iframe.source = test.url + "?clientId="+channelConfig.subtopic +
      "&sendCensusResultURL=" + channelConfig.sendCensusResultURL +
      "&numRows="+numRows.value +
      "&enableGZip="+enableGZip.selected;
      
      // auto switch to user results
      resultType.selectedValue = yourResults.value;
      switchChartArrayCollection();
      
      cursorManager.setBusyCursor();
    }
    
    private function switchChartArrayCollection():void
    {
      cdp.close();
      
      if (resultType.selection == averageResults)
      {
        chartArrayCollection = averageResultsArrayCollection;
      }
      else if (resultType.selection == yourResults)
      {
        chartArrayCollection = yourResultsArrayCollection;
      }
    }
    
    private function fetchAverageResults():void
    {
      if ((channelConfig.remoteObject != null) && (tests.length > 0))
      {
        
        for each (var test:Object in tests)
        {
          // reset results
          var result:Object = getAverageResultsItem(test.id);
          resetResult(result);
          
          var token:AsyncToken = channelConfig.remoteObject.getAverageResults(test.id, enableGZip.selected, numRows.value);
          token.addResponder(new AsyncResponder(handleAverageResultsResult, handleAverageResultsFault, {testId: test.id, gzip: enableGZip.selected, numRows: numRows.value}));
        }
      }
    }
    
    private function handleAverageResultsResult(event:ResultEvent, token:Object):void
    {
      var item:Object = getAverageResultsItem(token.testId);
      item.numRows = token.numRows;
      item.gzip = token.gzip;
      for (var resultType:String in event.result)
      {
        item[resultType] = event.result[resultType];
      }
      item["transferTime"] = item['requestTime'] - item['totalServerTime'];
      
      averageResultsArrayCollection.itemUpdated(item);
    }
    
    private function handleAverageResultsFault(event:FaultEvent, token:Object):void
    {
      //trace('fault');
    }
    
    private function getAverageResultsItem(testId:String):Object
    {
      var averageResultsItem:Object;
      
      for each (var item:Object in averageResultsArrayCollection)
      {
        if (item.id == testId)
        {
          averageResultsItem = item;
          
          return averageResultsItem;
        }
      }
      
      var newItem:Object = new Object();
      newItem.id = testId;
      
      for each (var t:Object in tests)
      {
        if (t.id == testId)
        {
          newItem.name = t.name;
        }
      }
      averageResultsArrayCollection.addItemAt(newItem, 0);
      return getAverageResultsItem(testId);
    }
    
    private function resetResult(result:Object):void
    {
      result.gzip = enableGZip.selected;
      result.numRows = numRows.value;
      result.totalServerTime = 0;
      result.transferTime = 0;
      result.totalServerTime = 0;
      result.requestTime = 0;
      result.parseTime = 0;
      result.renderTime = 0;
      result.contentLength = 0;
      result.memorySize = 0;
    }
      
    public function selectChartItem(item:Object):void
    {
      if (item != null)
      {
        cdp.data = item.item;
        
        cdp.open();
      }
      else
      {
        cdp.close();
      }
    }
    ]]>
  </mx:Script>

  <mx:Metadata>
  [SWF(backgroundColor="0xe5e5e5")]
  </mx:Metadata>
  
  <mx:initialize>
    changeTheme("readable");

    srv.send();
    
    var item:ContextMenuItem = new ContextMenuItem("Invert Colors");
    item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function (event:Event):void {
      currentTheme == "sexy" ? changeTheme("readable") : changeTheme("sexy")
    });
    this.contextMenu.customItems.push(item);
  </mx:initialize>

  <mx:String id="currentTheme"/>

  <mx:ArrayCollection id="tests"/>

  <census2:ChannelConfig id="channelConfig">
    <census2:message>
      updateResult(event.message.body.testId,  event.message.body.resultType, new Number(event.message.body.resultData));
    </census2:message>
    <census2:setup>
      fetchAverageResults();
    </census2:setup>
  </census2:ChannelConfig>

  <mx:HTTPService id="srv" url="tests.xml">
    <mx:result>
      tests = event.result.tests.test;
      for each (var test:Object in tests)
      {
        resetResults(test);
      }
      fetchAverageResults();
    </mx:result>
  </mx:HTTPService>

  <mx:SeriesInterpolate id="interpolate"/>

  <mx:HBox width="100%" height="100%" horizontalGap="0" styleName="innerBackground">
    <mx:VBox width="275" height="100%" horizontalAlign="center" verticalGap="0" horizontalScrollPolicy="off" paddingBottom="10">
      <mx:Spacer height="15"/>
      <mx:Label text="Census v2.0" height="25" styleName="headerLabel"/>
      <mx:HRule width="90%"/>
      <mx:Spacer height="10"/>
      <mx:HBox width="90%" verticalAlign="middle" horizontalAlign="center" horizontalGap="3">
        <mx:Label text="Rows" paddingTop="2"/>
        <controls:MyNumericStepper id="numRows" minimum="1000" maximum="100000" stepSize="1000" value="5000" useHandCursor="true" buttonMode="true" height="26" width="70" textIndent="0" textAlign="right" change="fetchAverageResults()"/>
        <mx:CheckBox id="enableGZip" label="GZip" labelPlacement="left" width="55" height="100%" selected="true" useHandCursor="true" buttonMode="true" mouseChildren="false" change="fetchAverageResults()"/>
        <mx:Button id="runButton" height="26" label="Execute" icon="@Embed(source='assets/rightIcon.png')"
                   enabled="{testList.selectedItem != null}" useHandCursor="{testList.selectedItem != null}" buttonMode="true"
                   paddingLeft="6" toolTip="Select a test to run">
          <mx:click>
            resetResults(testList.selectedItem);
            startTest(testList.selectedItem);
          </mx:click>
        </mx:Button>
      </mx:HBox>
      <mx:Spacer height="10"/>
      <mx:List id="testList" width="90%" height="100%" dataProvider="{tests}" styleName="leftInnerContainer" doubleClickEnabled="true">
        <mx:itemRenderer>
          <mx:Component>
            <mx:HBox paddingTop="0" paddingBottom="0" verticalScrollPolicy="off" horizontalScrollPolicy="off"
              useHandCursor="true" buttonMode="true" mouseChildren="false" backgroundAlpha="0.000001" backgroundColor="#ffffff">
              <mx:Label text="{data.name}" fontSize="10" width="90" styleName="listItem" fontWeight="bold"/>
              <mx:Label text="{data.description}" fontSize="10"/>
            </mx:HBox>
          </mx:Component>
        </mx:itemRenderer>
        <mx:itemDoubleClick>
          resetResults(testList.selectedItem);
          startTest(testList.selectedItem);
        </mx:itemDoubleClick>
      </mx:List>
      <mx:Spacer height="10"/>
      <controls:LabelLink url="http://www.jamesward.com/blog/census" label="Learn more about Census"/>
    </mx:VBox>
    <mx:VBox width="100%" height="100%" horizontalAlign="center" verticalGap="0" paddingTop="40" paddingLeft="0" paddingRight="20" paddingBottom="10">
      <mx:HRule width="100%"/>
      <mx:Spacer height="10"/>
      <mx:VBox id="myTabs" width="100%" height="50%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
        <mx:HBox width="100%" horizontalAlign="center">
          <controls:ChartLegendCombo id="clc" charts="{[recordsPerSecondChartView, transferSizeChartView, clientSideMemoryChartView]}">
            <controls:change>
            chartsVBox.y = (recordsPerSecondChartView.height * -1 * clc.selectedIndex);
            </controls:change>
          </controls:ChartLegendCombo>
          <mx:RadioButtonGroup id="resultType" selectedValue="AverageResults" change="switchChartArrayCollection()"/>
          <mx:RadioButton groupName="resultType" id="averageResults" value="AverageResults" label="Average Results" useHandCursor="true" buttonMode="true"/>
          <mx:RadioButton groupName="resultType" id="yourResults" value="YourResults" label="Your Results" useHandCursor="true" buttonMode="true"/>
        </mx:HBox>
        <mx:Canvas id="chartsCanvas" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
          
          <mx:VBox id="chartsVBox" width="100%" height="{chartsCanvas.height * 3}" verticalGap="0" moveEffect="Move">
            <views:RecordsPerSecondChartView id="recordsPerSecondChartView" width="100%" height="100%" dataProvider="{chartArrayCollection}"/>
            <views:TransferSizeChartView id="transferSizeChartView" width="100%" height="100%" dataProvider="{chartArrayCollection}"/>
            <views:ClientSideMemoryChartView id="clientSideMemoryChartView" width="100%" height="100%" dataProvider="{chartArrayCollection}"/>
          </mx:VBox>

          <controls:ChartDataPopUp id="cdp" top="1" right="21"/>
          
        </mx:Canvas>
      </mx:VBox>
      <mx:Spacer height="10"/>
      <mx:Box width="100%" height="50%" styleName="leftInnerContainer">
        <local:IFrame id="iframe" width="100%" height="100%" visible="true"/>
      </mx:Box>
    </mx:VBox>
  </mx:HBox>

</mx:Application>