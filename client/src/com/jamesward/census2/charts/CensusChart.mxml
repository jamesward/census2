<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:charts="com.jamesward.census2.charts.*"
           xmlns:degrafa="http://www.degrafa.com/2007"
           horizontalScrollPolicy="off"
           verticalScrollPolicy="off">

  <mx:Script><![CDATA[
    import com.jamesward.census2.core.ResultVO;

    import com.jamesward.census2.core.TestVO;

    import mx.events.CollectionEvent;

    import com.jamesward.census2.core.Model;

    [Bindable]
    public var averageColors:Array;

    [Bindable]
    public var userColors:Array;

    [Bindable]
    public var dataFields:Array;

    [Bindable]
    public var maxDataValue:uint;

    [Bindable]
    public var axisLabelFormatterFunction:Function;


    [Bindable]
    private var lineColor:Number;

    private function calcMaxDataValue():uint
    {
      var curMax:uint = 0;

      for each (var result:ResultVO in Model.getInstance().results)
      {
        // use all of the results for calculating the max data value
        //if ((result.gzip == Model.getInstance().enableGzip) && (result.numRows == Model.getInstance().numRows))
        //{
          for each (var i:String in [ResultVO.AVERAGE, ResultVO.USER])
          {
            var tm:uint = 0;
            for each (var dataField:String in dataFields)
            {
              var v:Number = result[i + "_" + dataField];

              if ((!isNaN(v)) && (v != -1))
              {
                tm += v;
              }
            }

            if (tm > curMax)
            {
              curMax = tm;
            }
          }
        //}
      }

      return curMax;
    }

    private function updateChartItems():void
    {
      maxDataValue = calcMaxDataValue();

      for each (var c:Object in chartVBox.getChildren())
      {
        c.item = Model.getInstance().getResult(c.id, Model.getInstance().numRows, Model.getInstance().enableGzip);
        c.maxDataValue = maxDataValue;
      }
    }

    public override function styleChanged(styleProp:String):void
    {
      super.styleChanged(styleProp);

      lineColor = getStyle("lineColor");
    }

    ]]></mx:Script>

  <mx:initialize><![CDATA[
      import com.jamesward.census2.core.MessageBus;

      import com.jamesward.census2.events.CensusResultEvent;

      import mx.events.PropertyChangeEvent;

      Model.getInstance().results.addEventListener(CollectionEvent.COLLECTION_CHANGE, function(event:CollectionEvent):void {
        updateChartItems();
      });

      MessageBus.addEventListener(CensusResultEvent.RESULT_RECEIVED, function(event:CensusResultEvent):void {
        updateChartItems();
      });

      Model.getInstance().addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, function(event:PropertyChangeEvent):void {
        if ((event.property == "numRows") || (event.property == "enableGzip"))
        {
          updateChartItems();
        }
      });

      Model.getInstance().addEventListener("testsChanged", function(event:Event):void {
        labelVBox.removeAllChildren();
        chartVBox.removeAllChildren();

        for each (var t:TestVO in Model.getInstance().tests)
        {
          // todo: this would be cleaners with an interface and a factory
          var lc:Object;
          var cc:Object;

          if (Model.getInstance().showAverageResults)
          {
            lc = new CensusChartItemLabelWithAverage();
            cc = new CensusChartItemRendererWithAverage();
          }
          else
          {
            lc = new CensusChartItemLabelNoAverage();
            cc = new CensusChartItemRendererNoAverage();
          }

          lc.percentHeight = 100;
          lc.percentWidth = 100;
          lc.item = t;
          labelVBox.addChild(lc as DisplayObject);

          cc.id = t.id;
          cc.percentHeight = 100;
          cc.percentWidth = 100;
          cc.averageColors = averageColors;
          cc.userColors = userColors;
          cc.dataFields = dataFields;
          chartVBox.addChild(cc as DisplayObject);
        }

        updateChartItems();
      });
    ]]></mx:initialize>

  <degrafa:SolidStroke id="s" color="{lineColor}"/>

  <mx:Canvas height="100%" width="100%">

    <mx:HBox id="chartBody" height="{this.height - 30}" width="100%" horizontalGap="0">

      <!-- Left Labels -->
      <mx:VBox id="labelVBox" width="{Model.getInstance().showAverageResults ? 250 : 150}" height="100%" verticalGap="5"/>
      
      <!-- Main Chart -->
      <mx:VBox id="chartVBox" height="100%" width="100%" verticalGap="5" styleName="leftInnerContainer"/>

    </mx:HBox>

    <!-- Horizontal Axis -->
    <charts:CensusChartAxisRenderer maxDataValue="{maxDataValue}" axisLabelFormatterFunction="{axisLabelFormatterFunction}" height="35" left="{Model.getInstance().showAverageResults ? 250 : 150}" right="0" bottom="0"/>

  </mx:Canvas>

  <degrafa:Surface width="1" height="{this.height - 30}" x="{Model.getInstance().showAverageResults ? 250 : 150}">
    <degrafa:GeometryGroup>
      <degrafa:Line x="0" x1="0" y="0" y1="{this.height - 30}" stroke="{s}"/>
    </degrafa:GeometryGroup>
  </degrafa:Surface>
  
</mx:Canvas>