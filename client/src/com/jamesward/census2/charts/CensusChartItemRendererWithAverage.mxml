<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:degrafa="http://www.degrafa.com/2007"
           xmlns:controls="com.jamesward.census2.controls.*"
           minHeight="70">

  <mx:Script><![CDATA[
    import com.jamesward.census2.core.Model;
    import com.jamesward.census2.core.ResultVO;

    import mx.core.Application;
    import mx.events.PropertyChangeEvent;

    private var _item:ResultVO;
    private var _maxDataValue:uint;

    public function set maxDataValue(_maxDataValue:uint):void
    {
      this._maxDataValue = _maxDataValue;

      updateBarWidths();
    }

    public function get maxDataValue():uint
    {
      return _maxDataValue;
    }


    public function set item(_item:ResultVO):void
    {
      this._item = _item;
      this._item.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, itemChanged, false, 0, false);

      itemChanged();
    }

    public function get item():ResultVO
    {
      return _item;
    }


    private function itemChanged(event:Event = null):void
    {
      var showAverageResult:Boolean = itemUserValueCheck("average");
      averageChart.visible = showAverageResult;
      noAverageLabel.visible = !showAverageResult;

      var showUserResult:Boolean = itemUserValueCheck("user");
      userChart.visible = showUserResult;
      noUserButton.visible = !showUserResult;
      noUserLabel.visible = !showUserResult;

      updateBarWidths();
    }

    [Bindable]
    public var averageColors:Array;

    [Bindable]
    public var userColors:Array;


    [Bindable]
    public var dataFields:Array;


    [Bindable]
    public var averageBarWidths:Array = [];

    [Bindable]
    public var userBarWidths:Array = [];

    [Bindable]
    public var averageBarX:Array = [];

    [Bindable]
    public var userBarX:Array = [];


    private function updateBarWidths():void
    {
      if (this.unscaledWidth > 0)
      {
        var zero:Array = [0];

        if (averageChart.visible)
        {
          var _averageBarWidths:Array = new Array();

          for each (var dataField1:String in dataFields)
          {
            _averageBarWidths.push(getBarWidth(dataField1, ResultVO.AVERAGE));
          }
          averageBarX = zero.concat(_averageBarWidths);

          averageBarWidths = _averageBarWidths;
        }

        if (userChart.visible)
        {
          var _userBarWidths:Array = new Array();
          for each (var dataField2:String in dataFields)
          {
            _userBarWidths.push(getBarWidth(dataField2, ResultVO.USER));
          }

          userBarX = zero.concat(_userBarWidths);

          userBarWidths = _userBarWidths;
        }
      }
    }


    private function itemUserValueCheck(userOrAverage:String):Boolean
    {
      var showResult:Boolean = true;

      for each (var dataField:String in dataFields)
      {
        if (isNaN(item[userOrAverage + "_" + dataField]))
        {
          showResult = false;
        }
      }
      return showResult;
    }

    private function getBarWidth(dataField:String, userOrAverage:String):uint
    {
      var v:Number = item[userOrAverage + "_" + dataField];
      //trace("v = " + v + " | width = " + this.unscaledWidth + " | maxDataValue = " + maxDataValue);
      if ((!isNaN(v)) && (v != -1))
      {
        var p:Number = v / maxDataValue;

        if (p > 1)
        {
          return 0;
        }

        //trace("p = " + p);
        return (this.width - 20) * p;
      }
      return 0;
    }

    private function showResultDetails(resultType:String):void
    {
      Model.getInstance().selectedResultType = resultType;
      Model.getInstance().selectedResult = item;
    }

    private function checkSelectedItem(event:PropertyChangeEvent):void
    {
      if ((event.property == "selectedResult") || (event.property == "selectedResultType"))
      {
        if ((Model.getInstance().selectedResult == item) && (Model.getInstance().selectedResultType == ResultVO.AVERAGE))
        {
          gs1_1.alpha = 0.3;
          gs1_2.alpha = 0.6;

          gs2_1.alpha = 0;
          gs2_2.alpha = 0.3;
        }
        else if ((Model.getInstance().selectedResult == item) && (Model.getInstance().selectedResultType == ResultVO.USER))
        {
          gs1_1.alpha = 0;
          gs1_2.alpha = 0.3;
          
          gs2_1.alpha = 0.3;
          gs2_2.alpha = 0.6;
        }
        else
        {
          gs1_1.alpha = 0;
          gs1_2.alpha = 0.3;

          gs2_1.alpha = 0;
          gs2_2.alpha = 0.3;

        }
      }
    }
    ]]></mx:Script>

  <mx:initialize>
      Model.getInstance().addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, checkSelectedItem);
  </mx:initialize>

  <mx:resize>
      updateBarWidths();
  </mx:resize>

  <!-- Average Chart -->
  <degrafa:Surface id="averageChart" width="100%" top="{(this.height / 2) + 5}" bottom="5">
    <degrafa:GeometryGroup>
      <degrafa:GeometryRepeater id="r1" count="{dataFields.length}">
        <degrafa:RegularRectangle id="myRect1" height="{(this.height / 2) - 10}">
          <degrafa:fill>
            <degrafa:ComplexFill>
              <degrafa:SolidFill id="f1"/>
              <degrafa:LinearGradientFill angle="90">
                <degrafa:gradientStops>
                  <degrafa:GradientStop id="gs1_1" ratio="0" color="#000000" alpha="0"/>
                  <degrafa:GradientStop id="gs1_2" ratio="1" color="#000000" alpha="0.3"/>
                </degrafa:gradientStops>
              </degrafa:LinearGradientFill>
            </degrafa:ComplexFill>
          </degrafa:fill>
        </degrafa:RegularRectangle>
        <degrafa:modifiers>
          <degrafa:PropertyModifier targets="{[f1]}" property="color" modifier="{averageColors}"
                                    modifierOperator="none"/>
          <degrafa:PropertyModifier targets="{[myRect1]}" property="width" modifier="{averageBarWidths}"
                                    modifierOperator="none"/>
          <degrafa:PropertyModifier targets="{[myRect1]}" property="x" modifier="{averageBarX}" modifierOperator="add"/>
        </degrafa:modifiers>
      </degrafa:GeometryRepeater>
    </degrafa:GeometryGroup>
    <degrafa:filters>
      <mx:DropShadowFilter distance="2" blurX="2" blurY="2" alpha="0.5"/>
    </degrafa:filters>
    <degrafa:rollOver>
        gs1_1.alpha = 0.3;
        gs1_2.alpha = 0.6;
    </degrafa:rollOver>
    <degrafa:rollOut><![CDATA[
        if ((Model.getInstance().selectedResult != item) || (Model.getInstance().selectedResultType != ResultVO.AVERAGE))
        {
          gs1_1.alpha = 0;
          gs1_2.alpha = 0.3;
        }
      ]]></degrafa:rollOut>
    <degrafa:click>
        showResultDetails(ResultVO.AVERAGE);
    </degrafa:click>
  </degrafa:Surface>

  <!-- No Average Data -->
  <mx:Label id="noAverageLabel" left="15" verticalCenter="{(this.height / 4)}" text="No results yet."/>


  <!-- User Chart -->
  <degrafa:Surface id="userChart" width="100%" top="5" bottom="{(this.height / 2) - 5}" doubleClickEnabled="true">
    <degrafa:GeometryGroup>
      <degrafa:GeometryRepeater id="r2" count="{dataFields.length}">
        <degrafa:RegularRectangle id="myRect2" width="100" height="{(this.height / 2) - 10}">
          <degrafa:fill>
            <degrafa:ComplexFill>
              <degrafa:SolidFill id="f2"/>
              <degrafa:LinearGradientFill angle="90">
                <degrafa:gradientStops>
                  <degrafa:GradientStop id="gs2_1" ratio="0" color="#000000" alpha="0"/>
                  <degrafa:GradientStop id="gs2_2" ratio="1" color="#000000" alpha="0.3"/>
                </degrafa:gradientStops>
              </degrafa:LinearGradientFill>
            </degrafa:ComplexFill>
          </degrafa:fill>
        </degrafa:RegularRectangle>
        <degrafa:modifiers>
          <degrafa:PropertyModifier targets="{[f2]}" property="color" modifier="{userColors}"
                                    modifierOperator="none"/>
          <degrafa:PropertyModifier targets="{[myRect2]}" property="width" modifier="{userBarWidths}"
                                    modifierOperator="none"/>
          <degrafa:PropertyModifier targets="{[myRect2]}" property="x" modifier="{userBarX}" modifierOperator="add"/>
        </degrafa:modifiers>
      </degrafa:GeometryRepeater>
    </degrafa:GeometryGroup>
    <degrafa:filters>
      <mx:DropShadowFilter distance="2" blurX="2" blurY="2" alpha="0.5"/>
    </degrafa:filters>
    <degrafa:rollOver>
        gs2_1.alpha = 0.3;
        gs2_2.alpha = 0.6;
    </degrafa:rollOver>
    <degrafa:rollOut><![CDATA[
        if ((Model.getInstance().selectedResult != item) || (Model.getInstance().selectedResultType != ResultVO.USER)) {
          gs2_1.alpha = 0;
          gs2_2.alpha = 0.3;
        }
      ]]></degrafa:rollOut>
    <degrafa:click>
        showResultDetails(ResultVO.USER);
    </degrafa:click>
    <degrafa:doubleClick>
        Application.application.runTest(item.testId);
    </degrafa:doubleClick>
  </degrafa:Surface>

  <!-- Run Test Buttom -->
  <mx:Label id="noUserButton" left="15" verticalCenter="{-(this.height / 4)}" text="You have not run this test yet."/>

  <controls:LabelLink id="noUserLabel" label="Run now!" left="220" verticalCenter="{-(this.height / 4) + 1}" height="22" fontSize="12">
    <controls:click>
      Application.application.runTest(item.testId);
      event.preventDefault();
      event.stopImmediatePropagation();
    </controls:click>
  </controls:LabelLink>
</mx:Canvas>